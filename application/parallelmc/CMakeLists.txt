IF(${PROJECT_NAME} STREQUAL "Mace")
  SET(APPS parallelmc PrefixTreeTest MerkleTreeTest StateCommunicatorTest MCMessageTest StateCommunicatorTcpTest)
  SET(parallelmc_SRCS modelchecker.cc ServiceTests.cc ${EXTERNAL_TEST_SRCS})
  SET(LIBNAME ParallelMaceMC)
ELSE(${PROJECT_NAME} STREQUAL "Mace")
  SET(APPS ${PROJECT_NAME}_parallelmc)
  SET(${PROJECT_NAME}_parallelmc_SRCS modelchecker.cc ${EXTERNAL_TEST_SRCS})
  SET(LIBNAME ${PROJECT_NAME}ParallelMC)
ENDIF(${PROJECT_NAME} STREQUAL "Mace")

SET(SERVICES ALL)

OPTION(MC_MPI "Use MPI for inter-node communication" off)
OPTION(INTEL_WARNING_SUPPRESS "Suppress some warnings with Intel compiler" on)

#IF(DEFINED MC_SOCKETS)
#  MESSAGE("Using sockets rather than MPI.")
#  ADD_DEFINITIONS(-DMC_PARALLEL -DMC_SOCKETS)
#ENDIF(DEFINED MC_SOCKETS)

IF(MC_MPI)  
  FIND_PACKAGE(MPI)
  MESSAGE("MPI_FOUND: " ${MPI_FOUND})

#  IF(DEFINED ${MPI_FOUND})
    MESSAGE("Using MPI.")
    SET(CMAKE_CXX_COMPILER mpicxx)
    #ADD_DEFINITIONS(-DMC_PARALLEL -DMC_MPI)
    ADD_DEFINITIONS(-DMC_PARALLEL -DMC_MPI -DMPICH_IGNORE_CXX_SEEK)
    IF(INTEL_WARNING_SUPPRESS)
      ADD_DEFINITIONS(-wd177 -wd185 -wd383 -wd424 -wd444 -wd654 -wd810 -wd858 -wd869 -wd981 -wd1125 -wd1418 -wd1419 -wd1599)
    ENDIF(INTEL_WARNING_SUPPRESS)

#  ELSE(DEFINED ${MPI_FOUND})
#    MESSAGE("MPI not found - bailing.")
  
#  ENDIF(DEFINED ${MPI_FOUND})
ENDIF(MC_MPI)

INCLUDE_DIRECTORIES(${Mace_SOURCE_DIR}/application/parallelmc)

INCLUDE(${${PROJECT_NAME}_SOURCE_DIR}/${APPLICATION_SUBDIR}/application.cmake)

IF(${PROJECT_NAME} STREQUAL "Mace")
  SET_TARGET_PROPERTIES(parallelmc PROPERTIES OUTPUT_NAME modelchecker)
ELSE(${PROJECT_NAME} STREQUAL "Mace")
  SET_TARGET_PROPERTIES(${PROJECT_NAME}_parallelmc PROPERTIES OUTPUT_NAME modelchecker)
ENDIF(${PROJECT_NAME} STREQUAL "Mace")
