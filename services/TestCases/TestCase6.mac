/**
chuangw: test case 6 continuesly creates events. Migration request is initiated from the application
This is a simpler test scenario -- only one service, not composition of services, and just one context apart from global context.

*/
service TestCase6;
provides MigrationTest;
trace=high;
typedefs {
}
services {

}

constants {
  //int32_t DEFAULT_NCONTEXT    =   4;
  //int32_t DEFAULT_NEVENT      =   16;
  
}
constructor_parameters {
    int32_t NCONTEXT = 4;
    int32_t NEVENT = 16;
    int64_t MAX_PRIME = 100000;
    uint64_t PERIOD = 1000;     //1 millisecond
    bool USETIMER = true;     
    uint32_t CONTEXTSIZE = 1;
}
 
state_variables {
  uint32_t eventCounter;
  timer mytimer __attribute((recur(PERIOD)));
  context A<int x>{
    mace::vector< uint32_t > obj;
  }
}

messages {
}
 
transitions {
  //downcall (state == init)maceInit()  {
  downcall maceInit()  {
    for(int i=0;i< NCONTEXT; i++ ){
      async_cellInit(i);
    }

    if( USETIMER ){
      eventCounter++;
      mytimer.schedule(PERIOD);
    }else{
      async_createMoreEvents(0,0);
    }
  }
  scheduler mytimer() {
      for(int i=0;i< NEVENT;i++){
          async_timerMoreEvents( (i + eventCounter) % NCONTEXT );
      }

      eventCounter = (NEVENT + eventCounter ) % NCONTEXT;
  }
  async [A<n>] timerMoreEvents(int n){
    do_primes();
  }
  async [A<n>] createMoreEvents(int n, int m){
    if( n == 0 && m == 0 ){
      for(int i=0;i< NCONTEXT;i++){
        if( NEVENT < NCONTEXT ){
            async_createMoreEvents(i, 0);
        }else{
          for(int j=0;j< ( NEVENT/ NCONTEXT );j++){
            async_createMoreEvents(i, j);
          }
        }
      }
    }
    do_primes();
  }
  async [A<n>] cellInit(int n){
    obj.resize( CONTEXTSIZE );
  }
  async explicitDowngrade(){
    //downgradeCurrentContext();
    //enterA( 5 );
  }
}

routines {
  [A<n>] void enterA( uint32_t n ){
    do_primes();
  }

  [__null] void do_primes()
  {
      int64_t i, num, primes = 0;
      for (num = 1; num <= MAX_PRIME; ++num) {
        for (i = 2; (i <= num) && (num % i != 0); ++i);
        if (i == num)
          ++primes;
      }
      //printf("Calculated %d primes.\n", primes);
  }


}

