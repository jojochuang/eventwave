 /**
 chuangw:
This service is created to test the syntax compatibility of the compiler.
The compiler is supposed to pass all test cases without complaining errors

This service is not supposed to be executed.
*/
 #include "boost/format.hpp"
 #include <sstream>
 #include <math.h>
service Simple;
trace=high;
//provides ServComp;
typedefs {
    typedef mace::vector< mace::vector<double> > Matrix;
}
services {
    Transport tcp = TcpTransport();
}
 
states{
}

constants {
    int32_t DEFAULT_ROWS    =   5;
    int32_t DEFAULT_COLUMNS =   5;
    uint64_t HEARTBEAT_PERIOD = 500*1000; // Period between each resend every 0.5 second
}
/**
chuangw:
to change default parameter values to foo, in parameters.default, set
ServiceConfig.Simple.ROWS = foo and
ServiceConfig.Simple.COLUMNS = foo
*/
constructor_parameters {
    int32_t ROWS = DEFAULT_ROWS;
    int32_t COLUMNS = DEFAULT_COLUMNS;
}
 
state_variables {
    
  /* Parser test: global context variables */
  int rows;
  int columns;
  timer TM;
  /* Parser test: non-parameterized context declaration */
  context A{
    bool test;
    timer TMA;
  }
  /* Parser test: parameterized context declaration */
  context B<int n>{
    bool test;
    timer TMB;
  }
  /* Parser test: multiple parameters context declaration */
  context C<uint32_t m1, mace::string str, uint16_t y>{
    bool test;
    timer TMC;
  }
  /* Parser test: nested context declaration */
  context D<int ROWS>{ 
    int init_cells;
    int finished_cell;
    context E{ 
      int z; 
      timer TME;
    }
    context G{
      int values;
      context H<int TEST>{
        bool testX;
        timer TMF  __attribute(( recur(1000000) ));
      }
    }
    context I<uint32_t y>{ 
      int values;
    }
  }
}

messages {
  TestMessage { int row; }
}
 
transitions {

  /* maceInit() runs in global context */
  downcall (state == init)maceInit()  {
    async_testA();
  }
  /* compiler test: argument-less async transition */
  async [A] testA(){

  }
  async [A] (state==init) testA(){

  }
  /* compiler test: timer without context */
  scheduler TM(){
  }
  scheduler (state==init) TM(){
  }
}

