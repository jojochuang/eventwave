#include "mset.h"
#include "marray.h"

service Tag;
 
provides Tag;
 
services {
  //Transport t::9000 = auto(shared,[reliable,inorder],[]);
  Transport tcp::9000 = TcpTransport();
}
 
constants {
  //the maximum time that a child can stay in the same spot
  uint64_t MOVEMENT_PERIOD = 1000 * 1000;
  //the maximum size that a room can have
  uint16_t MAXIMUMSIZE = 20;
  //the kid direction constants
  uint16_t DIRECTION_STATIONARY = 0;
  uint16_t DIRECTION_UP = 1;
  uint16_t DIRECTION_DOWN = 2;
  uint16_t DIRECTION_LEFT = 3;
  uint16_t DIRECTION_RIGHT = 4;
  //the default room size constants
  uint16_t DEFAULT_ROOM_LENGTH = 10;
  uint16_t DEFAULT_ROOM_WIDTH = 10;
  //indicates the role of kid
  uint16_t KID_ROLE_NORMAL = 0;
  uint16_t KID_ROLE_IT = 1;
  //indicates the location that the kid stays in
  uint16_t LOCATION_IN_ROOM = 0;
  uint16_t LOCATION_IN_AISLE = 1;
  //indicates the default location that the kid stays
  uint16_t DEFAULT_BUILDING = 1;
  uint16_t DEFAULT_ROOM = 0;
  uint16_t DEFAULT_X_COOR = 0;
  uint16_t DEFAULT_Y_COOR = 0;
}
 
states {
  //after all the contexts have been initialized, the state change to ready
  ready;
}
 
#minclude "TagMessage.mi"

state_variables {
  context Building <uint16_t nBuilding> {
  	uint16_t buildingID;
    context Room <uint16_t nRoom> {
			uint16_t roomID;
			mace::set<uint16_t> kidsInRoom;
			uint16_t length;
			uint16_t width;
			mace::array<mace::array<int, MAXIMUMSIZE>, MAXIMUMSIZE> kidsMap;
    }
    //aisle is special place for transtions
    //"it" can't tag kids in aisle
    context Aisle {
   		uint16_t aisleID;
			//a set keeps track of the ID of the kids
			mace::set<uint16_t> kidsInAisle;
    }
  }
  context Kid <uint16_t nKid> {
  	//indicates the ID of a kid
    uint16_t kidID;
		//indicate that if the kid is "it", '1' is "it"
    uint16_t roleStatus;
    //indicate if the kid is in the aisle or in the room
    //0 represent the "Room", 1 represent the "Aisle"
    int location;
    //indicates the location of the kids
    uint16_t currentBuilding;
    uint16_t currentRoom;
    uint16_t x_coordinate;
    uint16_t y_coordinate;
    //indicates the boudary of the room that the kid currently stayed
    uint16_t xBoundary;
    uint16_t yBoundary;
    //indicates the direction that a kid runs
    //'0' is not move, '1','2','3','4' means up, down, left, right
    uint16_t kidDirection;
    //timer kidRun;
  }
}

transitions {
  downcall (state == init) maceInit() {
    /*std::cout << localAddress() << std::endl;
    std::cout << "==============================================================" << std::endl;
    std::cout << "Calling maceInit now" << std::endl;
    std::cout << "==============================================================" << std::endl;*/
  	int nBuilding = 2, nRoom = 2, nKid = 8;
		//initial buildings and rooms
    std::cout << "Initializing " << nBuilding << " buildings and " << nRoom << " rooms." << std::endl;
    for (int i = 0; i < nBuilding; i++) {
      buildingInit(i + 1);
      for (int j = 0; j < nRoom; j++) {
        roomInit(i + 1, j + 1);
      }
    }
    std::cout << "Initializing " << nKid << " kids." << std::endl; 
    for (int i = 0; i < nKid; i++) {
      kidInit(i + 1);
    }
    /*std::cout << "==============================================================" << std::endl;
    std::cout << "Initialization done" << std::endl;
    std::cout << "==============================================================" << std::endl;*/
    state = ready;
	}

  upcall deliver(const MaceKey& src, const MaceKey& dest, const ChangeRoom& msg) {
    if (returnKidLocation(msg.kidID) == 1) {
      //changeRoom(msg.srcBuilding, msg.destBuilding, msg.destRoom, msg.kidID);      
      removeFromAisle(msg.srcBuilding, msg.kidID);
      if (changeToRoom(msg.destBuilding, msg.destRoom, msg.kidID)) {
        //downcall_route success
      }
      else {
        //downcall_route fail
      }
    }
    else {
      //suppose send back a invalid message
      std::cout << "Kid No." << msg.kidID << " is not in aisle." << std::endl;
      std::cout << "Movement canceled." << std::endl;
    }
    downcall_route(src, RequireInitial()); 
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const SetToIt& msg) {
    std::cout << "A setToIt message has been received." << std::endl;
    //setToIt(msg.kidID);
  }

  /*upcall deliver(const MaceKey& src, const MaceKey& dest, const RequireRoomInfo& msg) {
    std::cout << "A RequireInfo message has been received." << std::endl;
    BuildingContainer::iterator itrBuilding;
    RoomContainer::iterator itrRoom;
    itrBuilding = buildings.find(msg.nBuilding);
    itrRoom = itrBuilding->second.rooms.find(msg.nRoom);
    downcall_route(src, ReceiveRoomInfo(msg.kidID, itrRoom->second.length, 
          itrRoom->second.width, itrRoom->second.kidsMap));
    std::cout << "A room information message has been send." << std::endl;
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const SetDirection& msg) {
    KidContainer::iterator itrKid;
    itrKid = kids.find(msg.kidID);
    itrKid->second.kidDirection = msg.newDirection;
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const RequireInitial& msg) {
    downcall_route(src, RequireInitial());
  }*/

  async [Kid<nKid>] updateKidLocation(uint16_t nKid, uint16_t newBuilding, uint16_t newRoom, 
                      uint16_t newX, uint16_t newY) {
    location  = LOCATION_IN_ROOM; 
    currentBuilding = newBuilding;
    currentRoom = newRoom;
    x_coordinate = newX;
    y_coordinate = newY;
    kidDirection = DIRECTION_STATIONARY;
  }
  /*scheduler kidRun() {
    //move all the kids except those who are in aisles 
    //if the kid is aisle, then do nothing
    //else if the kid is room then move the kid if it doesn't bump into anything
    std::cout << "==============================================================" << std::endl;
    std::cout << "Timer Expires. Movement Period begins." << std::endl;
    std::cout << "==============================================================" << std::endl;*/

    /*int tmpX, tmpY;
    for (uint32_t i = 1; i < kids.size() + 1; i++) {
      KidContainer::iterator itrKid;
      itrKid = kids.find(i);
      if (itrKid->second.location == 1) {
        std::cout << "Kid No." << itrKid->second.kidID << " is in aisle." << std::endl;
        std::cout << "Movement canceled." << std::endl;
        continue;
      }
      else {
        int kidDirection = itrKid->second.kidDirection;
        if(kidDirection == 1) {
          tmpY++;
        }
        else if (kidDirection == 2) {
          tmpY--;
        }
        else if (kidDirection == 3) {
          tmpX--;
        }
        else if (kidDirection == 4) {
          tmpX++;
        }
        else {
          //if the direction is set to 0 which means not move
          return;
        }
        //check if this attempt step is cross the boundary
        if (tmpX > itrKid->second.xBoundary || tmpY > itrKid->second.yBoundary 
            || tmpX < 0 || tmpY < 0) {
          //the kid won't move until the direction has been changed
          continue;
        }
        else if (tmpX == 0 && tmpY == 0) {
          //teleport to aisle
          BuildingContainer::iterator itrBuilding;
          RoomContainer::iterator itrRoom;
          itrBuilding = buildings.find(itrKid->second.currentBuilding);
          //add the kid to the aisle in that building
          itrBuilding->second.aisle.kidsInAisle.insert(itrKid->second.kidID); 
          //remove the kid from the room
          itrRoom = itrBuilding->second.rooms.find(itrKid->second.currentRoom);
          itrRoom->second.kidsInRoom.erase(itrKid->second.kidID);
          itrRoom->second.kidsMap[itrKid->second.x_coordinate][itrKid->second.y_coordinate] = 0;

//          std::cout << "Kid No." << itrKid->second.kidID << " running from room"
//            << itrKid->second.currentRoom << " to aisle." << std::endl; 
          itrKid->second.currentRoom = 0;
          itrKid->second.location = 1; 
          itrKid->second.x_coordinate = 0;
          itrKid->second.y_coordinate = 0;
          itrKid->second.xBoundary = 0;
          itrKid->second.yBoundary = 0;
          itrKid->second.kidDirection = 0;

        }
        else {
          //move within the room
          BuildingContainer::iterator itrBuilding;
          RoomContainer::iterator itrRoom;
          itrBuilding = buildings.find(itrKid->second.currentBuilding);
          //if there is no one block him, then move
          itrRoom = itrBuilding->second.rooms.find(itrKid->second.currentRoom);
          if (itrRoom->second.kidsMap[tmpX][tmpY] == 0) {
            //remove the kid from the previous spot 
            itrRoom->second.kidsMap[itrKid->second.x_coordinate][itrKid->second.y_coordinate]=0;
            itrKid->second.x_coordinate = tmpX;
            itrKid->second.y_coordinate = tmpY;
            itrRoom->second.kidsMap[tmpX][tmpY] = itrKid->second.kidID; 
          }
          else {
            std::cout << "Kid No." << itrKid->second.kidID << "has been blocked "
              << "by Kid No." << itrRoom->second.kidsMap[tmpX][tmpY] << std::endl;
          }

        }
      }
    }
    std::cout << "==============================================================" << std::endl;
    std::cout << "Movement period ends. Reschedule the timer." << std::endl;
    std::cout << "==============================================================" << std::endl;

    kidRun.schedule(MOVEMENT_PERIOD);
  }*/
}

routines {

  [Building<nBuilding>] void buildingInit (int nBuilding) {
    buildingID = nBuilding;  
  }
  [Building<nBuilding>::Room<nRoom>] void roomInit(int nBuilding, int nRoom) {
    roomID = nRoom;
    length = 10;
    width = 10;
  }
  [Kid<nKid>] void kidInit(int nKid) {
    kidID = nKid;
    roleStatus = KID_ROLE_NORMAL;
    location = LOCATION_IN_AISLE;
    currentBuilding = DEFAULT_BUILDING;
    currentRoom = DEFAULT_ROOM;
    x_coordinate = DEFAULT_X_COOR;
    y_coordinate = DEFAULT_Y_COOR;
    xBoundary = DEFAULT_ROOM_LENGTH;
    yBoundary = DEFAULT_ROOM_WIDTH;
    kidDirection = DIRECTION_STATIONARY;
  }
  [Kid<nKid>] int returnKidLocation(uint16_t nKid) {
    return location; 
  }
  [Building<nBuilding>::Aisle] bool removeFromAisle(uint16_t nBuilding, 
                                          uint16_t kidID) {
    //remove the kid from the kid container in aisle 
    ASSERT(kidsInAisle.containsKey(kidID));
    kidsInAisle.erase(kidID);
    return true;
  }
  [Building<nBuilding>::Room<nRoom>] bool changeToRoom(uint16_t nBuilding,
                                                uint16_t nRoom, uint16_t kidID) {
    //add the kid to the kid container in the room
    kidsInRoom.insert(kidID);
    //add the kid to the room map
    for (uint16_t i = 0; i < length; i++) {
      for (uint16_t j = 0; j < width; j++) {
        if (kidsMap[i][j] == 0 && ((i + j) != 0)) {
          //if there is a space in that room, then place the kid in the place
          async_updateKidLocation(kidID, nBuilding, nRoom, i, j);
          kidsMap[i][j] = kidID;
          return true;
        }
      }
    }
    //if there is no space left in that room, then return false
    return false;
  }


    /*bool setToIt(uint16_t nKid) {
      KidContainer::iterator itrKid;
      itrKid = kids.find(nKid);
      if (itrKid->second.roleStatus == 0) {
        itrKid->second.roleStatus = 1;
        return true;
      }
      else {
        std::cout << "The kid is \"it\" already. Can't be changed to it again." << std::endl; 
        return false;
      }
    }*/
}
