#include "marray.h"
#include "RandomUtil.h"
#include "mace-macros.h"

service Tag;

trace=high;
 
services {
  //This is a funcky problem here. Will be fixed later.
  //Transport t::9000 = auto(shared,[reliable,inorder],[]);
  Transport tcp::9000 = TcpTransport();
}
 
constants {
  //the maximum size that a room can have
  uint16_t MAXIMUMSIZE = 10;
  //the kid direction constants
  uint16_t DIRECTION_STATIONARY = 0;
  uint16_t DIRECTION_UP = 1;
  uint16_t DIRECTION_DOWN = 2;
  uint16_t DIRECTION_LEFT = 3;
  uint16_t DIRECTION_RIGHT = 4;
  //the default room size constants
  uint16_t DEFAULT_ROOM_LENGTH = 10;
  uint16_t DEFAULT_ROOM_WIDTH = 10;
  //indicates the role of kid
  uint16_t ROLE_NOTIT = 0;
  uint16_t ROLE_IT = 1;
  //indicates the location that the kid stays in
  uint16_t LOCATION_IN_ROOM = 0;
  uint16_t LOCATION_IN_AISLE = 1;
  //indicates the default location that the kid stays
  uint16_t DEFAULT_BUILDING = 0;
  uint16_t DEFAULT_ROOM = 0;
  uint16_t DEFAULT_X_COOR = 0;
  uint16_t DEFAULT_Y_COOR = 0;
  
}
 
constructor_parameters {
  //the number for Kid, Building, Room context
  uint16_t NKID = 10;
  uint16_t NBUILDING = 1;
  uint16_t NROOM = 1;
  //the time interval for the timer
  uint64_t MOVEMENT_PERIOD = 5 * 1000 * 1000;     //5 sec in micros
}

states {
  //After all the contexts have been initialized, the state change to ready
  ready;
}
 
#minclude "TagMessage.mi"

state_variables {
  timer kidRun __attribute((recur(MOVEMENT_PERIOD)));
  context Building <uint16_t nBuilding> {
  	uint16_t buildingID;
    context Room <uint16_t nRoom> {
			uint16_t roomID;
			mace::set<uint16_t> kidsInRoom;
			uint16_t length;
			uint16_t width;
			mace::array<mace::array<int, MAXIMUMSIZE>, MAXIMUMSIZE> kidsMap;
    }
    //aisle is a special place for kid transtions
    //"it" can't tag kids in aisle and kid can be teleport to other rooms
    //through aisle
    context Aisle {
			//a set keeps track of the ID of the kids
			mace::set<uint16_t> kidsInAisle;
    }
  }
  context Kid <uint16_t nKid> {
  	//indicates the ID of a kid
    uint16_t kidID;
    uint16_t roleStatus;
    int location;
    //indicates the location of the kids
    uint16_t currentBuilding;
    uint16_t currentRoom;
    uint16_t x_coordinate;
    uint16_t y_coordinate;
    //indicates the boudary of the room that the kid currently stayed
    uint16_t xBoundary;
    uint16_t yBoundary;
    //indicates the direction that a kid runs
    uint16_t kidDirection;
  }
}

transitions {
  downcall (state == init) maceInit() {
		//initial buildings and rooms
    maceout << "Initializing " << NBUILDING << " buildings and " << NROOM << " rooms." 
      << Log::endl;
    for (uint16_t bCount = 0; bCount < NBUILDING; bCount++) {
      async_buildingInit(bCount);
      async_aisleInit(bCount);
    }
    maceout << "Initializing " << NKID << " kids." << Log::endl; 
    for (uint16_t kCount = 0; kCount < NKID; kCount++) {
      async_kidInit(kCount);
      //add the kid to the aisle where he has been initialized
      async_addToAisle(DEFAULT_BUILDING, kCount);
    }
    
    kidRun.schedule(5000000);
    state = ready;
	}
  
  //initial a single building
  async [Building<nBuilding>] void buildingInit (int nBuilding) {
    maceout << "Async call buildingInit has been called" << Log::endl;
    ASSERT(nBuilding >= 0);
    buildingID = nBuilding;  
    for (uint16_t rCount = 0; rCount < NROOM; rCount++) {
      async_roomInit(nBuilding, rCount);
    }
  }

  //initial a single room
  async [Building<nBuilding>::Room<nRoom>] void roomInit(int nBuilding, int nRoom) {
    maceout << "Async call roomInit has been called" << Log::endl;
    ASSERT(nBuilding >= 0 && nRoom >= 0);
    for (int i = 0; i < DEFAULT_ROOM_LENGTH; i++) {
      for (int j = 0; j < DEFAULT_ROOM_WIDTH; j++) {
        kidsMap[i][j] = -1;
      }
    }
    roomID = nRoom;
    length = 10;
    width = 10;
  }

  async [Building<nBuilding>::Aisle] void aisleInit(int nBuilding) {
    maceout << "Async call aisleInit has been called" << Log::endl;
  }

  //initial a single kid
  async [Kid<nKid>] void kidInit(int nKid) {
    maceout << "Async call kidInit has been called" << Log::endl;
    //initial all the attributes of the kid
    ASSERT(nKid >= 0);
    kidID = nKid;
    roleStatus = ROLE_NOTIT;
    location = LOCATION_IN_AISLE;
    currentBuilding = DEFAULT_BUILDING;
    currentRoom = DEFAULT_ROOM;     //if the kid is in aisle, then this var won't be checked  
    x_coordinate = DEFAULT_X_COOR;
    y_coordinate = DEFAULT_Y_COOR;
    xBoundary = DEFAULT_ROOM_LENGTH;
    yBoundary = DEFAULT_ROOM_WIDTH;
    kidDirection = DIRECTION_STATIONARY;
  }

  async [Building<nBuilding>::Aisle] void addToAisle(uint16_t nBuilding, uint16_t nKid) {
    kidsInAisle.insert(nKid);
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const ChangeRoom& msg) {
    maceout << "ChangeRoom message has been received" << Log::endl;
    ASSERT(msg.kidID >= 0);
    if (returnKidLocation(msg.kidID) == LOCATION_IN_AISLE) {
      removeFromAisle(msg.srcBuilding, msg.kidID);
      if (changeToRoom(msg.destBuilding, msg.destRoom, msg.kidID)) {
        //downcall_route success
        downcall_route(src, ChangeRoomResult(msg.kidID, true));
      }
      else {
        //downcall_route fail
        downcall_route(src, ChangeRoomResult(msg.kidID, false));
      }
    }
    else {
      //suppose send back a invalid message
      maceout << "Kid No." << msg.kidID << " is not in aisle" << Log::endl;
      maceout << "Change Room action has been canceled" << Log::endl;
      downcall_route(src, ChangeRoomResult(msg.kidID, false));
    }
  }

  //The client first send a RequireKidInit to get all the info from the designated kid
  upcall [Kid<msg.kidID>] deliver(const MaceKey& src, const MaceKey& dest, 
      const RequireKidInit& msg) {
    ASSERT(msg.kidID < NKID);
    downcall_route(src, ResponseKidInit(kidID, roleStatus, location, currentBuilding, 
          currentRoom, x_coordinate, y_coordinate, xBoundary, yBoundary, kidDirection));
  }
  
  upcall [Building<msg.nBuilding>::Room<msg.nRoom>] deliver(const MaceKey& src, 
      const MaceKey& dest, const RequireRoomInfo& msg) {
    maceout << "A RequireInfo message has been received" << Log::endl;
    maceout << "A room information message has been send" << Log::endl;
    ASSERT(msg.kidID >= 0);
    downcall_route(src, ReceiveRoomInfo(msg.kidID, length, width, kidsMap)); 
  }
  
  upcall [Kid<msg.kidID>] deliver(const MaceKey& src, const MaceKey& dest, 
      const SetDirection& msg) {
    maceout << "A SetDirection message has been received" << Log::endl;
    switch (msg.newDirection) {
      case DIRECTION_STATIONARY:
        kidDirection = msg.newDirection;
        break;
      case DIRECTION_UP:
        kidDirection = msg.newDirection;
        break;
      case DIRECTION_DOWN:
        kidDirection = msg.newDirection;
        break;
      case DIRECTION_LEFT:
        kidDirection = msg.newDirection;
        break;
      case DIRECTION_RIGHT:
        kidDirection = msg.newDirection;
        break;
      default:
        ABORT("Kid direction invalid!");
    }
  }

  scheduler kidRun() {
    //1.first downgrade to Kid context explicitly
    downgradeCurrentContext();
    //2.Use a routine to call the Kid context
    for (uint16_t kCounter = 0; kCounter < NKID; kCounter++) {
      kidMove(kCounter);
    }
    //3.after the current cycle ends output the latest room map.
    for (int i = 0; i < NBUILDING; i++) {
      for (int j = 0; j < NROOM; j++) {
        //dumpRoomMap(i, j); 
      }
    }
  }
}

routines {
  [Kid<nKid>] bool kidMove(uint16_t nKid) {
    maceout << "Routine kidMove has been called. Kid No." << nKid 
      << " is trying to move." << Log::endl;
    ASSERT(nKid >= 0);
    if (location == LOCATION_IN_AISLE) {
      maceout << "Kid No." << nKid << " is in Aisle. "
        << "Movement canceled." << Log::endl;
      return false;
    }
    //maceout<<"koldx"<<x_coordinate<<"koldy"<<y_coordinate<<Log::endl;
    uint16_t newX = x_coordinate;
    uint16_t newY = y_coordinate;
    //keep the kid running, for test purpose only
    if (kidDirection == DIRECTION_STATIONARY) {
      kidDirection = 1 + RandomUtil::randInt(3);
    }
    switch (kidDirection) {
        case DIRECTION_STATIONARY:
          return false;
        case DIRECTION_UP:
          newY++;
          break;
        case DIRECTION_DOWN:
          newY--;
          break;
        case DIRECTION_LEFT:
          newX--;
          break;
        case DIRECTION_RIGHT:
          newX++;
          break;
        default:
          ABORT("Kid direction invalid!");
    }
    maceout << "The direction of the kid is " << kidDirection << Log::endl;
    if (newX == 0 && newY == 0) {
      maceout << "Opps, Kid No." << nKid << " has been teleport to aisle." << Log::endl;
      teleportToAisle(nKid, getKidBuilding(nKid), getKidRoom(nKid), 
          x_coordinate, y_coordinate);
    }
    else if (newX >= xBoundary || newY >= yBoundary) {
      maceout << "The kid No." << nKid << " has been blocked by wall" << Log::endl;
      //change direction when blocked by walls, for test purpose only
      kidDirection = 1 + RandomUtil::randInt(3);
      return false;
    }
    else {
      if(ifBlockedByKid(currentBuilding, currentRoom, x_coordinate, y_coordinate, 
            newX, newY, nKid, roleStatus)) {
        //change direction when blocked by other kids, for test purpose only
        kidDirection = 1 + RandomUtil::randInt(3);
        return false;
      }
    }
    return true;
  }

  //returns the kid location, whether in rooom or aisle
  [Kid<nKid>] int returnKidLocation(uint16_t nKid) {
    maceout << "Routine returnKidLocation has been called" << Log::endl;
    ASSERT(location == LOCATION_IN_AISLE || location == LOCATION_IN_ROOM);
    return location; 
  }
  [Kid<nKid>] void teleportToAisle(uint16_t nKid, uint16_t nBuilding, uint16_t nRoom, 
      uint16_t x, uint16_t y) {
    //update the kid's new location first
    updateKidLocation(nKid, nBuilding, DEFAULT_ROOM, DEFAULT_X_COOR, DEFAULT_Y_COOR,
        LOCATION_IN_AISLE);
    addToAisle(nBuilding, nKid);
    removeFromRoom(nBuilding, nRoom, nKid, x, y);
  }
  //remove the kid from the aisle
  [Building<nBuilding>::Aisle] bool removeFromAisle(uint16_t nBuilding, uint16_t kidID) {
    maceout << "Routine removeFromAisle has been called" << Log::endl;
    //remove the kid from the kid container in aisle 
    ASSERT(kidsInAisle.containsKey(kidID));
    //this part need to be fixed later
    kidsInAisle.erase(kidID);
    return true;
  }

  [Building<nBuilding>::Room<nRoom>] bool removeFromRoom(uint16_t nBuilding, uint16_t nRoom, uint16_t kidID, uint16_t x, uint16_t y) {
    maceout << "Routine removeFromRoom has been called" << Log::endl;
    ASSERT(kidsInRoom.containsKey(kidID));
    kidsInRoom.erase(kidID);
    kidsMap[x][y] = -1;
    return true;
  }

  //after remove the kid from the aisle, change the kid to the designated room
  [Building<nBuilding>::Room<nRoom>] bool changeToRoom(uint16_t nBuilding, uint16_t nRoom, uint16_t kidID) {
    maceout << "Routine changeToRoom has been called" << Log::endl;
    //add the kid to the kid container in the room
    ASSERT(kidID >= 0);
    kidsInRoom.insert(kidID);
    //add the kid to the room map
    for (uint16_t i = 0; i < length; i++) {
      for (uint16_t j = 0; j < width; j++) {
        if (kidsMap[i][j] == -1 && ((i + j) != 0)) {
          //if there is a space except the origin, then place the kid in the place
          updateKidLocation(kidID, nBuilding, nRoom, i, j, LOCATION_IN_ROOM);
          kidsMap[i][j] = kidID;
          return true;
    }
      }
    }
    //if there is no space left in that room, then return false
    maceout << "There is no space left in Building No." << nBuilding 
      << "Room No." << nRoom << Log::endl;
    return false;
  }

  [Building<nBuilding>::Room<nRoom>] bool ifBlockedByKid(uint16_t nBuilding, uint16_t nRoom, uint16_t oldX, uint16_t oldY, uint16_t newX, uint16_t newY, uint16_t nKid, uint16_t kidRole) {
    maceout << "Routine ifBlockedByKid has been called" << Log::endl;
    ASSERT(oldX != newX || oldY != newY);
    //if there is nobody stand in front of the kid
    if (kidsMap[newX][newY] == -1) {
      kidsMap[newX][newY] = nKid;
      kidsMap[oldX][oldY] = -1;
      updateKidLocation(nKid, nBuilding, nRoom, newX, newY, LOCATION_IN_ROOM);
      maceout << "The kid No." << nKid << " has moved successfully." << Log::endl;
      return false;
    }
    else {
      if (kidRole == ROLE_IT) {
        /*maceout << "Oops kid No." << nKid << " has been taged." << Log::endl;
        setToIt(kidsMap[newX][newY]);
        setToNormal(nKid);
        //remove the new "it" from the map first
        teleportToAisle(kidsMap[newX][newY], nBuilding, nRoom, newX, newY); 
        kidsMap[newX][newY] = 0;*/
        return false;
      }
      else {
        maceout << "The kid No." << nKid << " has been blocked by the the kid No." << 
          kidsMap[newX][newY] << Log::endl;
        return true;
      }
    }
  }
  [Kid<nKid>] void updateKidLocation(uint16_t nKid, uint16_t newBuilding,
      uint16_t newRoom, uint16_t newX, uint16_t newY, int newLocation) {
    maceout << "Routine updateKidLocation has been called" << Log::endl;
    ASSERT(location == LOCATION_IN_AISLE || location == LOCATION_IN_ROOM);
    location  = newLocation; 
    ASSERT(newBuilding >= 0);
    currentBuilding = newBuilding;
    ASSERT(newRoom >= 0);
    currentRoom = newRoom;
    
    x_coordinate = newX;
    y_coordinate = newY;
    kidDirection = DIRECTION_STATIONARY;
  }

  [Building<nBuilding>::Room<nRoom>] bool dumpRoomMap(uint16_t nBuilding, uint16_t nRoom) {
    std::cout << "Room map for Building No." << nBuilding << " Room No. " << nRoom << std::endl;
    for (uint16_t i = 0; i < length; i++) {
      for (uint16_t j = 0; j < width; j++) {
        if(kidsMap[i][j] != -1)
          std::cout << "*" << kidsMap[i][j] << " ";
        else
          std::cout << kidsMap[i][j] << " ";
      }
      std::cout << std::endl;
    }
    return true;
  }
  [Kid<nKid>] uint16_t getKidDirection(uint16_t nKid) {
    maceout << "Routine getKidDirection has been called" << Log::endl;
    ASSERT(nKid >= 0);
    return kidDirection;
  }

  [Kid<nKid>] uint16_t getKidBuilding(uint16_t nKid) {
    maceout << "Routine getKidBuilding has been called" << Log::endl;
    ASSERT(nKid >= 0);
    return currentBuilding;
  }

  [Kid<nKid>] uint16_t getKidRoom(uint16_t nKid) {
    maceout << "Routine getKidRoom has been called" << Log::endl;
    ASSERT(nKid >= 0);
    return currentRoom;
  }

  [Kid<nKid>] uint16_t getXCoor(uint16_t nKid) {
    maceout << "Routine getXCoor has been called" << Log::endl;
    ASSERT(nKid >= 0);
    return x_coordinate;   
  }
  
  [Kid<nKid>] uint16_t getYCoor(uint16_t nKid) {
    maceout << "Routine getYCoor has been called" << Log::endl;
    ASSERT(nKid >= 0);
    return y_coordinate; 
  }

  [Kid<nKid>] uint16_t getKidRole(uint16_t nKid) {
    maceout << "Routine getKidRole has been called" << Log::endl;
    ASSERT(nKid >= 0);
    return roleStatus; 
  }

  [Kid<nKid>] bool setToIt(uint16_t nKid) {
    maceout << "Routine setToIt has been called" << Log::endl;
    ASSERT(roleStatus != ROLE_IT);
    roleStatus = ROLE_IT;
    return true;
  }

  [Kid<nKid>] bool setToNormal(uint16_t nKid) {
    maceout << "Routine setToNormal has been called" << Log::endl;
    ASSERT(roleStatus != ROLE_NOTIT);
    roleStatus = ROLE_NOTIT;
    return true;
  }
}
