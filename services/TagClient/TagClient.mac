#include "marray.h"
#include "RandomUtil.h"
#include "mvector.h"
#include "mlist.h"
#include "m_map.h"
#include <stdio.h>
#include <sys/time.h>

service TagClient;
 
trace=low;

services {
  //Transport t::9000 = auto(shared,[],[]);
  Transport t::9000 = TcpTransport();
}
 
constants {
  // Indicates the location that the kid stays in
  uint16_t LOCATION_IN_WORLD = 0;
  uint16_t LOCATION_IN_HALLWAY = 1;
  uint16_t LOCATION_IN_ROOM = 2;

  // Indicates the kid direction
  uint16_t DIRECTION_STATIONARY = 0;
  uint16_t DIRECTION_UP = 1;
  uint16_t DIRECTION_DOWN = 2;
  uint16_t DIRECTION_LEFT = 3;
  uint16_t DIRECTION_RIGHT = 4;

  // The size of a standard world, hallway and room. It's a 50 * 50 grid.
  uint16_t WORLD_SIZE = 50;
  uint16_t HALLWAY_SIZE = 50;
  uint16_t ROOM_SIZE = 50;

  uint16_t DEFAULT_COORD = 0;
}
 
constructor_parameters {
  // The total exist time of a player
  uint64_t GLOBAL_PLAY_TIME = 360 * 1000 * 1000;
  // The time interval to send every move instruction
  uint64_t MOVEMENT_PERIOD = 1 * 1000 * 1000;
  // The time interval to request the current room map
  uint64_t MAP_REQUEST_PERIOD = 1 * 1000 * 1000;
}

states {
  ready;
}

auto_types {
  coordinate __attribute((comparable(equals=default; lessthan=default))) {
    uint16_t x;
    uint16_t y;
  }
}

#minclude "MaceTagMessage.mi"

state_variables {
  // The timer to control the total exist time
  timer globalTimer;
  // The timer to control the frequency of map request
  timer mapRequest __attribute((recur(MAP_REQUEST_PERIOD)));
  //This is the timer that increase how many msgs to be sent per cycle
  timer msgSend __attribute((recur(MOVEMENT_PERIOD)));
  // The server's address
  MaceKey serverAddr; 

  //uint16_t msg_per_cycle;
  uint16_t kidID;
  uint16_t kidRole;
  int kidLocation;
  uint16_t currentBuilding;
  uint16_t currentRoom;
  coordinate coord;
  uint16_t kidDirection;
}
 
transitions {
  downcall (state==init) maceInit() {
    maceout << "Player Init has been called." << Log::endl; 
    serverAddr = MaceKey(ipv4, params::get<std::string>("SERVER_ADDR") );
    // Send out the kid initial request
    downcall_route(serverAddr, RequireKidInit());
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const ResponseKidInit& msg) {
    maceout << "A ResponseKidInit msg has been received." << Log::endl;
    kidID = msg.kidID;
    kidRole = msg.kidRole;
    kidLocation = msg.kidLocation;
    currentBuilding = msg.kidBuilding;
    currentRoom = msg.kidRoom;
    coord.x = DEFAULT_COORD;
    coord.y = DEFAULT_COORD;
    kidDirection = msg.kidDirection;
    // Start the global timer and the instruction timer
    globalTimer.schedule(GLOBAL_PLAY_TIME);
    msgSend.schedule(MOVEMENT_PERIOD);
    mapRequest.schedule(MAP_REQUEST_PERIOD);
    state = ready;
    maceout << "The client has been initialized." << Log::endl;
  }
 
  //Receive the room Map
  upcall deliver(const MaceKey& src, const MaceKey& dest, const ReceiveMapInfo& msg)
  {
    // Printout the map from the msg
    std::cout << "-------------------------------------------------------" << std::endl;
    std::cout << "Printing the map now" << std::endl;
    std::cout << "-------------------------------------------------------" << std::endl;
    for (uint16_t i = 0; i < WORLD_SIZE / 2; i++) {
      for (uint16_t j = 0; j < WORLD_SIZE / 2; j++) {
        if (msg.map[i][j] != -1) 
          std::cout << "*" << msg.map[i][j] << " ";
        else
          std::cout << msg.map[i][j] << " ";
        }
      std::cout << std::endl;
    }
  }
 
  scheduler mapRequest() {
    // Constantly request the map from the server
    downcall_route(serverAddr, RequireMapInfo(kidID, kidLocation, currentBuilding, currentRoom));
  }
  
  scheduler globalTimer() {
    // Exit the application when it's triggered
    exit(0);
  }

  scheduler msgSend() {
    // Constantly change the kid's direction
    uint16_t newDirection = RandomUtil::randInt(5); 
    downcall_route(serverAddr, SetDirection(kidID, newDirection));
  }
}

routines {

}
