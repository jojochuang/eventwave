/* 
 * GameOfLifeStencil.mac : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2012, Bo Sang
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * aaaaaaaa
 * ----END-OF-LEGAL-STUFF---- 
*/

#include "mlist.h"
#include "marray.h"
#include "mdeque.h"

#include <sys/time.h>
#include <time.h>

service GenericGameOfLife;

trace = med;

constants {
    uint64_t MAX_X = 1000;
    uint64_t MAX_Y = 1000;
}

services {
    Transport tcp = TcpTransport();
}

states {
}

constructor_parameters {
    
}

auto_types {
    Position __attribute((comparable(equals=default; lessthan=default))) {
        int x;
        int y;
    }

		Barrier {
				Index _idx;

				mace::queue<Index> _orig_queue;					
				mace::map<Index, mace::string> _required_elements;
				mace::queue<mace::string> _vars;
				int _count;
		}
}

typedefs {
  		
}

state_variables {
		context Stencil_Server {
				mace::map<Index, mace::string> _ele_values;
				mace::map<Index, mace::queue<Index> > _waiting_bars;

				mace::map<Index, Barrier> _idx_bar_map;
		}

		 
}

messages {
				
}

transitions {
  	downcall [__null] update_value( Index idx,  mace::string val){
				async_update_val( idx, val);
		}

		downcall [__null] add_barrier( mace::queue<Index> &required_elements, mace::queue<mace::string> &vars, 
				Index& myIdx){
				Barrier bar;

				bar._orig_queue = required_elements;
				while( !required_elements.empty() ){
						Index idx = required_elements.pop_front();
						(bar._required_elements)[idx] = "";
				}
				bar._vars = vars;
				bar._count = 0;
				bar._idx = myIdx;
				async_add_bar(bar);	
		}

		async [Stencil_Server] add_bar( Barrier barrier){
				Index idx = barrier._idx;
				idx.round--;
				_idx_bar_map.earse(idx);
				idx.round++;
				_idx_bar_map[idx] = barrier;

				mace::map<Index, mace::string>& required_eles = barrier._required_elements;
				
				mace::map<Index, mace::string>::iterator iter = required_eles.begin();
				for(; iter!=required.eles.end(); iter++){
						mace::map<Index, mace::string>::iterator val_iter = _ele_values.find(iter->first);
						if(val_iter != _ele_values.end()){
								iter->second = val_iter->second;
								barrier.count++;
						}else{
								mace::map<Index, mace::queue<Barrier>>::iterator wbar_iter = _waiting_bars.find(iter->first);
								if(wbar_iter == _waiting_bars.end()){
										mace::queue<Index> iq;
										iq.push(idx);
										_waiting_bars[iter->first] = iq;
								}else{
										(wbar_iter->second).push_back(idx);
								}
						}
				}

				if(barrier._count == required_eles.size()){
						invoke_value_updated(barrier);	
				}
		}

		async [Stencil_Server] update_val( Index idx, mace::string val ){
				idx._round --;
				_ele_values.erase(idx);
				idx._round ++;
				
				_ele_values[idx] = val;
				
				mace::map<Index, mace::queue<Index> >::iterater q_iter =  _waiting_bars.find(idx);
				if(q_iter != _waiting_bars.end()){
						mace::queue<Index> idx_queue = q_iter->second;

						while(!idx_queue.empty()){
								Index b_idx = idx_queue.pop_front();
								mace::map<Index, Barrier>::iterator bar_iter = _idx_bar_map.find(b_idx);
								if(bar_iter!=_idx_bar_map.end()){
										(bar_iter->second)._required_elements[idx] = val;
										(bar_iter->second)._count ++;
										if( (bar_iter->second)._count >= (bar_iter->second)._required_elements.size()){
												invoke_value_updated(bar_iter->second);	
										}
								}
						}
						_waiting_bars.erase(q_iter);
				}

		}
			
}

routines {
		void invoke_value_updated(Barrier barrier){
				mace::queue<Index>& orig_queue = barrier._orig_queue;
				mace::queue<mace::string> required_ele_queue;

				mace::map<Index, mace::string>& required_elements = barrier._required_elements;
				mace::map<Index, mace::string>::iterator iter;
				
				while(!orig_queue.empty()){
						Index idx = orig_queue.pop_front();
						iter = required_elements.find(idx);
						if(iter != required_elements.end()){
								required_ele_queue.push_back(iter->second);	
						}
				}

				upcallAll(upcall_val_updated, required_ele_queue, barrier._vars, barrier._idx);
		}
}


