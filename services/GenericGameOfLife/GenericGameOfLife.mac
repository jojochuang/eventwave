/* 
 * GameOfLifeStencil.mac : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2012, Bo Sang
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * aaaaaaaa
 * ----END-OF-LEGAL-STUFF---- 
*/

#include "mlist.h"
#include "marray.h"
#include "mdeque.h"

#include <sys/time.h>
#include <time.h>

service GenericGameOfLife;

trace = med;

constants {
    uint64_t MAX_X = 1000;
    uint64_t MAX_Y = 1000;
}

services {
    Transport tcp = TcpTransport();
}

states {
}

constructor_parameters {
    
}

auto_types {
    Index {
	    mace::string idx;
		uint64_t round;
		int flag;
	}

	Barrier {
        mace::string _identifier;

	    mace::queue<mace::string> _orig_vars;					
		mace::map<Index, mace::string> _required_vars;
		mace::queue<mace::string> _vars;
		int _count;
	}
}

typedefs {
  		
}

state_variables {
    context Stencil_Server {
	    mace::map<Index, mace::string> _ele_values;
		mace::map<Index, mace::queue<mace::string> > _waiting_ids;

		mace::map<mace::string, Barrier> _idx_bar_map;
	}
}

messages {
				
}

transitions {
    downcall [__null] update_value( mace::queue<mace::string> idxes, mace::queue<uint64_t> rounds, 
	        mace::queue<mace::string> vals, int flag){
	    while(!idxes.empty()){
		    mace::string idx = idxes.pop_front();
			mace::string val = vals.pop_front();
			uint64_t round = rounds.pop_front();

			Index Idx;
			Idx.idx = idx;
			Idx.round = round;
			Idx.flag = flag;
						
			async_update_val(Idx, val);
		}
				
	}

	downcall [__null] add_barrier( mace::queue<mace::string> &required_vars, mace::queue<int> &flags, mace::queue<uint64_t> & rounds, 
            mace::queue<mace::string> &vars, mace::string& identifier){
		Barrier bar;

		bar._orig_queue = required_vars;
        bar._vars = vars;
		while( !required_vars.empty() ){
		    Index Idx;
            Idx.idx = required_vars.pop_front();
            Idx.round = rounds.pop_front();
            Idx.flag = flags.pop_front();

			(bar._required_vars)[Idx] = "";
		}
		
		bar._count = 0;
		bar._identifier = identifier;
		async_add_bar(bar);	
	}

	async [Stencil_Server] add_bar( Barrier barrier){
	    _idx_bar_map[barrier._identifier] = barrier;

		mace::map<Index, mace::string>& required_vars = barrier._required_vars;
				
		mace::map<Index, mace::string>::iterator iter = required_vars.begin();
		for(; iter!=required_vars.end(); iter++){
		    mace::map<Index, mace::string>::iterator val_iter = _ele_values.find(iter->first);
			if(val_iter != _ele_values.end()){
			    iter->second = val_iter->second;
				barrier._count++;
			}else{
				mace::map<Index, mace::queue<mace::string>>::iterator wid_iter = _waiting_ids.find(iter->first);
				if(wid_iter == _waiting_ids.end()){
				    mace::queue<mace::string> idq;
					idq.push(barrier._identifier);
					_waiting_ids[iter->first] = idq;
				}else{
					(wid_iter->second).push_back(barrier._identifier);
				}
			}
		}

		if(barrier._count == required_vars.size()){
		    invoke_value_updated(barrier);	
		}
	}

	async [Stencil_Server] update_val( Index idx, mace::string val ){
	    idx._round --;
		_ele_values.erase(idx);
		idx._round ++;
				
		_ele_values[idx] = val;
				
		mace::map<Index, mace::queue<Index> >::iterater q_iter =  _waiting_ids.find(idx);
		if(q_iter != _waiting_ids.end()){
			mace::queue<mace::string> idq = q_iter->second;

			while(!idq.empty()){
			    mace::string id = idq.pop_front();
				mace::map<mace::string, Barrier>::iterator id_iter = _id_bar_map.find(id);
				if(bar_iter!=_id_bar_map.end()){
				    (bar_iter->second)._required_vars[idx] = val;
					(bar_iter->second)._count ++;
					if( (bar_iter->second)._count >= (bar_iter->second)._required_vars.size()){
						invoke_value_updated(bar_iter->second);	
					}
				}
			}
			_waiting_ids.erase(q_iter);
		}

	}
			
}

routines {
		void invoke_value_updated(Barrier barrier){
		    mace::queue<mace::string>& orig_vars = barrier._orig_vars;
			mace::queue<mace::string> required_ele_queue;

			mace::map<Index, mace::string>& required_elements = barrier._required_vars;
			mace::map<Index, mace::string>::iterator iter;
				
			while(!orig_vars.empty()){
			    Index idx = orig_queue.pop_front();
				iter = required_elements.find(idx);
				if(iter != required_elements.end()){
				    required_ele_queue.push_back(iter->second);	
				}
			}

			upcall_val_updated(required_ele_queue, barrier._vars, barrier._identifier);
		}
}


