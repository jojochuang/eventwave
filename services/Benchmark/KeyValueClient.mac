service KeyValueClient;

provides Null, MigrationTest;

time = MaceTime;

constructor_parameters {
  NodeSet KV_NODES = NodeSet(); /* Should be only one node */
	uint32_t NUM_GET_WORKERS = 12;
	uint32_t NUM_PUT_WORKERS = 12;
	uint64_t ROUNDS = 50;
}

services {
  Transport t;
}

messages {
  Get __attribute((number(0))){
		uint32_t worker_id;
    mace::string key;
  }
  GetReply {
		uint32_t worker_id;
		bool get_flag;
    bool exists;
    mace::string key;
    mace::string value;
  }
  Put {
		uint32_t worker_id;
    mace::string key;
    mace::string value;
  }
}

state_variables {
	context get_worker<uint32_t id> {
		uint64_t start_time;
		mace::string key;	
		uint64_t sequence;
	}

	context put_worker<uint32_t id> {
		uint64_t start_time;
		mace::string key;
		mace::string value;
		uint64_t sequence;
	}

}

local_address {
  return downcall_localAddress();
}


transitions {
  downcall maceInit() {
    ADD_SELECTORS("BS_KeyValueClient");

    ASSERT(KV_NODES.size() == 1 );

		for(uint32_t i=0; i<NUM_PUT_WORKERS; i++) async_init_get_worker(i);

		for(uint32_t i=0; i<NUM_GET_WORKERS; i++) async_init_put_worker(i);
  }

	async [get_worker<id>] init_get_worker(uint32_t id) {
		ADD_SELECTORS("BS_KeyValueClient");
		maceout << "Initialize get_worker "<<id<<Log::endl;
		sequence = 0;
		start_time = mace::getmtime();
		async_get_worker_req(id);
	}

	async [get_worker<id>] get_worker_req(uint32_t id) {
		std::ostringstream ostr;
    ostr << "key-" << localAddress() << "-" << sequence;
    key = ostr.str();
    downcall_route(*(KV_NODES.begin()), Get(id, key));
	}

	async [get_worker<id>] get_worker_reply(uint32_t id) {
		ADD_SELECTORS("BS_KeyValueClient");
		sequence++;
		if (sequence%ROUNDS == 0){
			maceout << "GET_WORKER "<<id<<" finish "<<sequence<< " rounds at "<<mace::getmtime()-start_time<<Log::endl;	
		}
		async_get_worker_req(id);
	}
	
	async [put_worker<id>] init_put_worker(uint32_t id) {
		ADD_SELECTORS("BS_KeyValueClient");
		maceout << "Initialize put worker "<<id<<Log::endl;
		sequence = 0;
		start_time = mace::getmtime();
		async_put_worker_req(id);
	}

	async [put_worker<id>] put_worker_req(uint32_t id) {
		std::ostringstream ostr;
    ostr << "key-" << localAddress() << "-" << sequence;
    key = ostr.str();
    ostr << "-value-" << curtime;
    value = ostr.str();
    downcall_route(*(KV_NODES.begin()), Put(id, key, value));
	}

	async [put_worker<id>] put_worker_reply(uint32_t id) {
		ADD_SELECTORS("BS_KeyValueClient");
		sequence++;
		if (sequence%ROUNDS == 0){
			maceout << "PUT_WORKER "<<id<<" finish "<<sequence<< " rounds at "<<mace::getmtime()-start_time<<Log::endl;	
		}
		async_put_worker_req(id);
	}

  upcall deliver(const MaceKey& src, const MaceKey& dest, const GetReply& msg) {
		uint32_t id = msg.worker_id;
		bool get_flag = msg.get_flag;
		//maceout << "Receive reply flag: " << msg.get_flag << Log::endl;

    if( get_flag == true ) {
      async_get_worker_reply(id);
    } else {
      async_put_worker_reply(id);
    }
  }

}


routines {

}



